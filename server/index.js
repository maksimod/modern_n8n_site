// server/index.js
const express = require('express');
const cors = require('cors');
const path = require('path');
const morgan = require('morgan');
const fs = require('fs');
const progressRouter = require('./routes/progress');
// –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø–æ–∫–∞ —ç—Ç–æ - —Å–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, 
// –∫–∞–∫ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
// const { startCleanupJob } = require('./utils/user-cleaner');

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å –¥–ª—è –ø—Ä–æ–±–ª–µ–º —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
const storageFixUtils = require('./utils/fix-storage');
const { getFileFromStorage } = require('./utils/file-uploader');
const { STORAGE_CONFIG } = require('./config');
require('dotenv').config();

// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Express
const app = express();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤–∏–¥–µ–æ
storageFixUtils.ensureVideosDirectory();

// Middleware
app.use(cors({
  origin: '*', // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  credentials: true,
  optionsSuccessStatus: 204
}));

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
app.use(express.json({ limit: '5000mb' }));
app.use(express.urlencoded({ extended: true, limit: '5000mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(morgan('dev'));

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use((req, res, next) => {
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  req.setTimeout(7200000); // 2 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  res.setTimeout(7200000);
  next();
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storageFixUtils.setupStorageMock(app);

app.use('/api/progress', progressRouter);

// –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
const cacheTime = 86400000 * 7; // 7 –¥–Ω–µ–π

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ-—Ñ–∞–π–ª–æ–≤
app.use((req, res, next) => {
  if (req.url.startsWith('/videos/') || req.url.endsWith('.mp4')) {
    // –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Range');
    res.setHeader('Access-Control-Expose-Headers', 'Content-Range, Accept-Ranges, Content-Length');
    
    // –î–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤–∏–¥–µ–æ
    res.setHeader('Accept-Ranges', 'bytes');
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π MIME-—Ç–∏–ø
    if (req.url.endsWith('.mp4')) {
      res.setHeader('Content-Type', 'video/mp4');
    }
    
    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    res.setHeader('Cache-Control', 'public, max-age=86400'); // 1 –¥–µ–Ω—å
  }
  next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤–∏–¥–µ–æ
app.get('/videos/:filename', async (req, res) => {
  const filename = req.params.filename;
  
  console.log(`üé¨ –ó–∞–ø—Ä–æ—Å –≤–∏–¥–µ–æ: ${filename}`);
  console.log(`üé¨ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:`, STORAGE_CONFIG);
  
  try {
    let videoData;
    let fileSize;
    
    if (STORAGE_CONFIG.USE_REMOTE_STORAGE) {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      try {
        console.log(`üé¨ –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${filename}`);
        videoData = await getFileFromStorage(filename);
        fileSize = videoData.length;
        console.log(`üé¨ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, —Ä–∞–∑–º–µ—Ä: ${fileSize} –±–∞–π—Ç`);
      } catch (error) {
        console.error(`üé¨ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${filename}`, error);
        return res.status(404).send('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      const videoPath = path.join(__dirname, 'data/videos', filename);
      console.log(`üé¨ –ò—â–µ–º —Ñ–∞–π–ª –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${videoPath}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
      if (!fs.existsSync(videoPath)) {
        console.error(`üé¨ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${videoPath}`);
        return res.status(404).send('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      const stat = fs.statSync(videoPath);
      fileSize = stat.size;
      console.log(`üé¨ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, —Ä–∞–∑–º–µ—Ä: ${fileSize} –±–∞–π—Ç`);
    }
    
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    const range = req.headers.range;
    
    if (range) {
      // –ü–∞—Ä—Å–∏–º Range header
      const parts = range.replace(/bytes=/, '').split('-');
      const start = parseInt(parts[0], 10);
      const end = parts[1] ? parseInt(parts[1], 10) : fileSize - 1;
      const chunkSize = (end - start) + 1;
      
      if (STORAGE_CONFIG.USE_REMOTE_STORAGE) {
        // –í —Å–ª—É—á–∞–µ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –±—É—Ñ–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        const chunk = videoData.slice(start, end + 1);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        res.writeHead(206, {
          'Content-Range': `bytes ${start}-${end}/${fileSize}`,
          'Accept-Ranges': 'bytes',
          'Content-Length': chunkSize,
          'Content-Type': 'video/mp4',
          'Cache-Control': 'public, max-age=86400'
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Ñ–∞–π–ª–∞
        res.end(chunk);
      } else {
        // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ —á—Ç–µ–Ω–∏—è
        const videoPath = path.join(__dirname, 'data/videos', filename);
        const fileStream = fs.createReadStream(videoPath, { start, end });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        res.writeHead(206, {
          'Content-Range': `bytes ${start}-${end}/${fileSize}`,
          'Accept-Ranges': 'bytes',
          'Content-Length': chunkSize,
          'Content-Type': 'video/mp4',
          'Cache-Control': 'public, max-age=86400'
        });
        
        // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Ç–æ–∫
        fileStream.pipe(res);
      }
    } else {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —á–∞—Å—Ç–∏—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
      if (STORAGE_CONFIG.USE_REMOTE_STORAGE) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        res.writeHead(200, {
          'Content-Length': fileSize,
          'Content-Type': 'video/mp4',
          'Cache-Control': 'public, max-age=86400'
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å –±—É—Ñ–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        res.end(videoData);
      } else {
        // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        const videoPath = path.join(__dirname, 'data/videos', filename);
        
        res.writeHead(200, {
          'Content-Length': fileSize,
          'Content-Type': 'video/mp4',
          'Cache-Control': 'public, max-age=86400'
        });
        
        fs.createReadStream(videoPath).pipe(res);
      }
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ ${filename}:`, error);
    res.status(500).send('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤–∏–¥–µ–æ-—Ñ–∞–π–ª—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
app.use('/videos', express.static(path.join(__dirname, 'data/videos'), {
  maxAge: cacheTime,
  setHeaders: (res) => {
    res.set('Accept-Ranges', 'bytes');
    res.set('Content-Type', 'video/mp4');
    res.set('Cache-Control', 'public, max-age=86400');
  }
}));

// –ú–∞—Ä—à—Ä—É—Ç—ã
const authRouter = require('./routes/auth');
const coursesRouter = require('./routes/courses');
const adminRouter = require('./routes/admin');

// –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
// let trustedUsersRouter;
// try {
//   trustedUsersRouter = require('./routes/trusted-users');
// } catch (error) {
//   console.warn('Trusted users routes not found, skipping: ', error.message);
// }

app.use('/api/auth', authRouter);
app.use('/api/courses', coursesRouter);
app.use('/api/admin', adminRouter);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
// if (trustedUsersRouter) {
//   app.use('/api/admin/trusted-users', trustedUsersRouter);
// }

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
app.get('/download/:filename', async (req, res) => {
  const filename = req.params.filename;
  
  try {
    if (STORAGE_CONFIG.USE_REMOTE_STORAGE) {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      try {
        const videoData = await getFileFromStorage(filename);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        res.setHeader('Content-Type', 'video/mp4');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        return res.send(videoData);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${filename}`, error);
        return res.status(404).json({ message: 'File not found' });
      }
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      const filePath = path.join(__dirname, 'data/videos', filename);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
      if (!fs.existsSync(filePath)) {
        return res.status(404).json({ message: 'File not found' });
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      res.download(filePath);
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filename}:`, error);
    res.status(500).json({ message: 'Server error' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç-–ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤–∏–¥–µ–æ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
// –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É CORS –ø—Ä–∏ –ø—Ä—è–º–æ–º –¥–æ—Å—Ç—É–ø–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É
app.get('/api/proxy/storage/:filename', async (req, res) => {
  const filename = req.params.filename;
  
  console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ${filename}`);
  
  if (!STORAGE_CONFIG.USE_REMOTE_STORAGE) {
    return res.status(400).json({ message: 'Remote storage is disabled' });
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API
    const videoData = await getFileFromStorage(filename);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –≤–∏–¥–µ–æ
    res.setHeader('Content-Type', 'video/mp4');
    res.setHeader('Accept-Ranges', 'bytes');
    res.setHeader('Cache-Control', 'public, max-age=86400'); // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 1 –¥–µ–Ω—å
    
    // –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Range');
    res.setHeader('Access-Control-Expose-Headers', 'Content-Range, Accept-Ranges, Content-Length');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    return res.send(videoData);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filename}:`, error);
    res.status(500).json({ message: 'Server error' });
  }
});

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.status(200).json({ status: 'ok' });
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ production —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, '../client/dist'), {
    maxAge: cacheTime,
    etag: true,
    lastModified: true
  }));
  
  app.get('*', (req, res) => {
    res.sendFile(path.resolve(__dirname, '../client', 'dist', 'index.html'));
  });
}

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    message: err.message || 'Internal Server Error'
  });
});

// –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// –ø–æ–∫–∞ –Ω–µ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
// startCleanupJob();

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5000;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:${PORT}`);
  console.log(`–û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'development'}`);
  // console.log('–°–∏—Å—Ç–µ–º–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
});